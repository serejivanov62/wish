
# Nginx configuration for wish.otvezu.by on the host machine

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name wish.otvezu.by;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name wish.otvezu.by;

    # SSL Configuration - REPLACE WITH YOUR ACTUAL CERTIFICATE PATHS
    # You will need to obtain and configure your SSL certificates.
    # Example using Let's Encrypt:
    # ssl_certificate /etc/letsencrypt/live/wish.otvezu.by/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/wish.otvezu.by/privkey.pem;

    # Placeholder for SSL certificates
    ssl_certificate /path/to/your/wish.otvezu.by.crt;
    ssl_certificate_key /path/to/your/wish.otvezu.by.key;

    # Recommended SSL settings
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    # Proxy API requests to the backend service (running on host port 8001)
    location /api/ {
        proxy_pass http://localhost:8001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # CORS headers might be needed if frontend and backend are on different subdomains
        # or if you have specific CORS requirements. For same domain, usually not needed.
        # add_header 'Access-Control-Allow-Origin' '$http_origin';
        # add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        # add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
        # add_header 'Access-Control-Allow-Credentials' 'true';
    }

    # Proxy Telegram webhook requests to the backend service (running on host port 8001)
    location /telegram-webhook {
        proxy_pass http://localhost:8001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Proxy all other requests to the frontend service (running on host port 3000)
    location / {
        proxy_pass http://localhost:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Error pages
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        # You might want to serve custom error pages from your frontend build
        # For now, this is a placeholder.
        return 500 "An internal error occurred.";
    }
}
